/// Generated by @lab11/anchorgen@{{anchorgenVersion}} at {{createdAt}}

use anchor_lang::prelude::*;

declare_id!("{{programId}}");

#[program]
pub mod {{name}} {
    use super::*;

    {{#each instructions}}
    #[allow(unused_variables)]
    pub fn {{this.methodName}}(
        ctx: Context<{{this.contextName}}>,
        {{#each this.args}}
        {{this.name}}: {{this.type}},
        {{/each}}
    ) -> Result<()> {
        Ok(())
    }

    {{/each}}
}

///// Accounts /////

{{#each instructions}}
#[derive(Accounts)]
pub struct {{this.contextName}}<'info> {
    {{#each this.accounts}}
    /// CHECK: generated
    {{#if this.annotation}}{{this.annotation}}
    {{!-- TODO Handle nested accounts --}}
    {{/if}}pub {{this.name}}: AccountInfo<'info>,
    {{/each}}
}

{{/each}}

{{#each accounts}}
#[account]
pub struct {{this.name}} {
    {{#each this.type.fields}}
    {{this.name}}: {{this.type}},
    {{/each}}
}
{{/each}}

///// Types /////

{{#each types}}
#[derive(AnchorSerialize, AnchorDeserialize)]
pub {{this.type.kind}} {{this.name}} {
    {{#if (eq this.type.kind 'struct')}}
    {{#each this.type.fields}}
    {{this.name}}: {{this.type}},
    {{/each}}

    {{~else~}}
    
    {{#each this.type.variants}}
    {{this.name}}
    {{~#if this.namedFields}} { {{#each this.namedFields}}{{this.name}}: {{this.type}}, {{/each~}} }{{/if}}
    {{~#if this.tupleFields}} ( {{#each this.tupleFields}}{{this}}, {{/each}}){{/if}},
    {{/each}}
    {{/if}}
}

{{/each}}

///// Error Codes /////

#[error_code]
pub enum ErrorCode {
    {{#each errors}}
    {{#if this.msg}}#[msg("{{this.msg}}")]
    {{/if}}{{this.name}}{{#if this.code}} = {{this.code}}{{/if}},
    {{/each}}
}
