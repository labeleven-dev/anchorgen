/// Generated by @lab11/anchorgen@1.0.0 at 2022-05-26T11:41:29.255Z

use anchor_lang::prelude::*;

declare_id!("xxxxxx");

#[program]
pub mod my_program {
    use super::*;

    #[allow(unused_variables)]
    pub fn do_something(
        ctx: Context<DoSomething>,
        primitive: u64,
        defined: SomeStruct,
        option: Option<u64>,
        coption: COption<u64>,
        bytes: Vec<u8>,
        string: &str,
        public_key: Pubkey,
    ) -> Result<()> {
        Ok(())
    }

}

///// Accounts /////

#[derive(Accounts)]
pub struct DoSomething<'info> {
    /// CHECK: generated
    pub an_account: AccountInfo<'info>,
    /// CHECK: generated
    #[account(mut)]
    pub a_mutable_account: AccountInfo<'info>,
    /// CHECK: generated
    #[account(signer)]
    pub signer: AccountInfo<'info>,
    /// CHECK: generated
    #[account(mut, signer)]
    pub mutable_signer: AccountInfo<'info>,
    /// CHECK: generated
    pub compositeAccount: AccountInfo<'info>,
}


#[account]
pub struct AccountStruct {
    some_key: Pubkey,
    amount: u64,
}

///// Types /////

#[derive(AnchorSerialize, AnchorDeserialize)]
pub struct SomeStruct {
    tokens: u64,
    decimals: u8,
}

#[derive(AnchorSerialize, AnchorDeserialize)]
pub enum SomeEnum {
    NoField,
    OneNameField { x: u8, },
    TwoNameField { x: u8, y: u16, },
    OneTuple ( u8, ),
    TwoTuple ( u8, i16, ),
}


///// Error Codes /////

#[error_code]
pub enum ErrorCode {
    OhDearGodStopIt,
    #[msg("Something has gone midly wrong!")]
    SomethingGoneMildlyWrong,
    #[msg("Something has gone horribly wrong!")]
    SomethingGoneHorriblyWrong = 666,
}
